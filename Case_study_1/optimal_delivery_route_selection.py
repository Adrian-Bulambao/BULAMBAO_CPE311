# -*- coding: utf-8 -*-
"""OPTIMAL DELIVERY ROUTE SELECTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19xUeuYoxMlymBy81JB1s6tg6WqzsTDPI
"""

def delivery(arr, speed):
    num_delivery = len(arr)

    def dev(done, need, arr, speed):
        needed = sum(s[2] for s in arr)

        #function that sorts the items by its priority level
        # priority level is the amount of hours needed to deliver the item
        def by_priority(arr, speed, needed):
            arr.sort(key=lambda x: x[2])
            best_route = []
            best_time = 0
            dist = 0

            #loops through each item to be delivered
            for i in range(need):
                a = arr[i][1]
                b = arr[i][2]
                total_dist = dist + a
                total_time = total_dist / speed
                best_time += total_time
                #values to be return if the time to deliver all
                #items exceed the time to be delivered

                if best_time > needed or best_time > b:
                    return float('inf'), [], "Error: No possible route" # returns error
                best_route.append(arr[i][0])
                dist = a
            #stating that this method is better
            method1 = "Delivering by prioritizing priority level is better"

            return round(best_time,2), "-->".join(best_route), method1

        def by_distance(arr, speed, needed):
            arr.sort(key=lambda x: x[1])
            best_route = []
            best_time = 0
            dist = 0

            for i in range(need):
                a = arr[i][1]
                b = arr[i][2]
                total_dist = dist + a
                total_time = total_dist / speed
                best_time += total_time
                #values to be return if the time to deliver all
                #items exceed the time to be delivered
                if best_time > needed or best_time > b:
                    return float('inf'), [], "Error: No possible route" # returns error
                best_route.append(arr[i][0])
                dist = a
            #stating that this method is better
            method2 = "Delivering by prioritizing location distance is better"

            return round(best_time,2), "-->".join(best_route), method2

        #gives the results to variables named by its representation and
        #its respective method 1 = by_priority 2 = by_distance
        time1, route1, method1 = by_priority(arr, speed, needed)
        time2, route2, method2 = by_distance(arr, speed, needed)

      #compares the time from the two methods and shows which is better
        if time1 < time2:
            return time1, route1, method1
        elif time2 < time1:
            return time2, route2, method2
        #this shows if both the time are equal
        #and checks if it yields same optimal time or both cannot compute
        elif time1 == time2 and route1 == []:
            return time1, "None", ("Both yield same results: " + method1)
        else:
            return time1, "\nor \n".join([(route1),(route2)]), "Both yield same results, both are optimal"
    #gives values to results that will be presented
    time, route, method = dev(0, num_delivery, arr, speed)
    #time = round(time, 2)
    return time, route, method

# Testing of the code
# items are in a nested list showing the location name,
# location distance, and priority level respectively
A = [["Location A", 40, 10], ["Location B", 90, 5], ["Location C", 40, 3],["Location D", 14, 12]]
speed = 50  # in km/hr
time, route, method = delivery(A, speed) #calls the main function to solve
# prints out the results
print(f"Results when delivering the items with average speed of {speed} km/hr:\n")
print(f"Time to deliver all: {time} hours\n")
print(f"Optimal route is:\n{route}\n")
print(method)